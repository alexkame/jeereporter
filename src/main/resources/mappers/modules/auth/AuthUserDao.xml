<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thinkgem.jeesite.modules.auth.dao.AuthUserDao">
    
	<sql id="authUserColumns">
		a.id AS "id",
		a.username AS "username",
		a.password AS "password",
		a.source AS "source",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.remarks AS "remarks",
		a.del_flag AS "delFlag"
	</sql>
	
	<sql id="authUserJoins">
	</sql>
    
	<select id="get" resultType="AuthUser">
		SELECT 
			<include refid="authUserColumns"/>
		FROM auth.auth_user a
		<include refid="authUserJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="AuthUser">
		SELECT 
			<include refid="authUserColumns"/>
		FROM auth.auth_user a
		<include refid="authUserJoins"/>
		<where>
			1=1
			<if test="username != null and username != ''">
				AND a.username LIKE CONCAT('%','${username}','%' )
			</if>
			<if test="phone != null and phone != ''">
				AND a.phone = #{phone}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="AuthUser">
		SELECT 
			<include refid="authUserColumns"/>
		FROM auth.auth_user a
		<include refid="authUserJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO auth.auth_user(
			id,
			username,
			password,
			source,
			create_by,
			create_date,
			update_by,
			update_date,
			remarks,
			del_flag
		) VALUES (
			#{id},
			#{username},
			#{password},
			#{source},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{remarks},
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE auth.auth_user SET 	
			username = #{username},
			source = #{source},
			update_by = #{updateBy.id},
			update_date = #{updateDate},
			remarks = #{remarks}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
        UPDATE auth.auth_user SET
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>

    <update id="deleteList">
        UPDATE auth.auth_user SET
        del_flag = 1
        WHERE id in
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
            #{item.id}
        </foreach>
    </update>

	<select id="findByAuthRole" resultType="AuthUser">
		select <include refid="authUserColumns"/>
		 from auth.auth_user_role b
		 LEFT JOIN auth.auth_user a on b.user_id=a.id
		 where b.role_id=#{roleid};
	</select>

    <select id="exist" resultType="java.lang.Integer">
        select COUNT(a.id)
        from auth.auth_user a
        where a.username=#{username}
    </select>

    <select id="existPhone" resultType="java.lang.Integer">
        select COUNT(a.id)
        from auth.auth_user a
        where a.phone=#{phone}
    </select>

    <select id="getAuthUser" resultType="AuthUser">
        select <include refid="authUserColumns"/>
        from auth.auth_user a
        where a.username=#{username}
        <if test="password != null and password != ''">
            AND a.password = #{password}
        </if>
    </select>

    <update id="updateUserPass">
        UPDATE auth.auth_user SET
        password = #{newPass}
        WHERE username = #{username} AND password=#{oldPass}
    </update>

    <update id="resetPass" parameterType="AuthUser">
        UPDATE auth.auth_user SET
        password = #{password}
        WHERE username = #{username}
    </update>

    <update id="resetUser" parameterType="AuthUser">
        UPDATE auth.auth_user SET
        del_flag = #{DEL_FLAG_NORMAL}
        WHERE id = #{id}
    </update>

    <select id="getAuthUserList"  resultType="AuthUser">
        SELECT <include refid="authUserColumns"/>
        FROM auth.auth_user a
        WHERE a.username in
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <update id="updateUserName">
        UPDATE auth.auth_user SET
        username = #{newUsername},
        password = #{newPass}
        WHERE username = #{oldUsername}
    </update>

</mapper>